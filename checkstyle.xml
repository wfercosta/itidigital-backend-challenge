<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
        "-//Checkstyle//DTD Checkstyle Configuration 1.3//EN"
        "https://checkstyle.org/dtds/configuration_1_3.dtd">
<module name="com.puppycrawl.tools.checkstyle.Checker">

    <!-- Root Checks -->
    <module name="NewlineAtEndOfFileCheck">
        <property name="lineSeparator" value="lf" />
    </module>

    <module name="LineLengthCheck">
        <property name="max" value="160" />
    </module>

    <!-- TreeWalker Checks -->
    <module name="com.puppycrawl.tools.checkstyle.TreeWalker">
        <!-- Annotations -->
        <module name="AnnotationUseStyleCheck">
            <property name="elementStyle" value="compact" />
        </module>
        <module name="MissingOverrideCheck" />
        <module name="PackageAnnotationCheck" />
        <module name="AnnotationLocationCheck">
            <property name="allowSamelineSingleParameterlessAnnotation"
                      value="false" />
        </module>

        <!-- Block Checks -->
        <module name="EmptyBlockCheck">
            <property name="option" value="text" />
        </module>
        <module name="LeftCurlyCheck" />
        <module name="RightCurlyCheck">
            <property name="option" value="alone" />
        </module>
        <module name="NeedBracesCheck" />
        <module name="AvoidNestedBlocksCheck" />

        <!-- Class Design -->
        <module name="InterfaceIsTypeCheck" />
        <module name="MutableExceptionCheck" />
        <module name="InnerTypeLastCheck" />
        <module name="OneTopLevelClassCheck" />

        <!-- Coding -->
        <module name="ParameterNumberCheck">
            <property name="max" value="4" />
        </module>
        <module name="MethodLengthCheck">
            <property name="max" value="25" />
        </module>
        <module name="FinalParameters" />
        <module name="CovariantEqualsCheck" />
        <module name="EmptyStatementCheck" />
        <module name="EqualsHashCodeCheck" />
        <module name="InnerAssignmentCheck" />
        <module name="SimplifyBooleanExpressionCheck" />
        <module name="SimplifyBooleanReturnCheck" />
        <module name="StringLiteralEqualityCheck" />
        <module name="NestedForDepthCheck">
            <property name="max" value="3" />
        </module>
        <module name="NestedIfDepthCheck">
            <property name="max" value="3" />
        </module>
        <module name="NestedTryDepthCheck">
            <property name="max" value="3" />
        </module>
        <module name="MultipleVariableDeclarationsCheck" />
        <module name="RequireThisCheck">
            <property name="checkMethods" value="false" />
            <property name="validateOnlyOverlapping" value="true" />
        </module>
        <module name="OneStatementPerLineCheck" />

        <!-- Imports -->
        <module name="AvoidStarImportCheck" />
        <module name="AvoidStaticImportCheck">
            <property name="excludes"
                      value="org.assertj.core.api.Assertions.*, org.junit.Assert.*,  org.junit.jupiter.api.Assertions.*, org.junit.Assume.*, org.junit.internal.matchers.ThrowableMessageMatcher.*, org.hamcrest.CoreMatchers.*, org.hamcrest.Matchers.*, org.springframework.boot.configurationprocessor.ConfigurationMetadataMatchers.*, org.springframework.boot.configurationprocessor.TestCompiler.*, org.springframework.boot.test.autoconfigure.AutoConfigurationImportedCondition.*, org.mockito.Mockito.*, org.mockito.BDDMockito.*, org.mockito.Matchers.*, org.mockito.ArgumentMatchers.*, org.springframework.restdocs.mockmvc.MockMvcRestDocumentation.*, org.springframework.restdocs.hypermedia.HypermediaDocumentation.*, org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*, org.springframework.test.web.servlet.result.MockMvcResultMatchers.*, org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestBuilders.*, org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.*, org.springframework.security.test.web.servlet.setup.SecurityMockMvcConfigurers.*, org.springframework.hateoas.mvc.ControllerLinkBuilder.linkTo, org.springframework.test.web.client.match.MockRestRequestMatchers.*, org.springframework.test.web.client.response.MockRestResponseCreators.*, org.springframework.web.reactive.function.server.RequestPredicates.*, org.springframework.web.reactive.function.server.RouterFunctions.*, org.springframework.test.web.servlet.setup.MockMvcBuilders.*, lombok.AccessLevel.*" />
        </module>
        <module name="IllegalImportCheck" />
        <module name="RedundantImportCheck" />
        <module name="UnusedImportsCheck">
            <property name="processJavadoc" value="false" />
        </module>
        <!-- <module name="ImportOrderCheck">
            <property name="groups" value="java,/^javax?\./,*,io.spring" />
            <property name="ordered" value="true" />
            <property name="separated" value="true" />
            <property name="option" value="bottom" />
            <property name="sortStaticImportsAlphabetically"
                value="true" />
        </module> -->

        <!-- Miscellaneous -->
        <module name="CommentsIndentationCheck">
            <property name="tokens" value="BLOCK_COMMENT_BEGIN"/>
        </module>
        <module name="UpperEllCheck"/>
        <module name="ArrayTypeStyleCheck"/>
        <module name="OuterTypeFilenameCheck"/>

        <!-- Modifiers -->
        <module name="RedundantModifierCheck"/>

        <!-- Comment Filter -->
        <module name="SuppressionCommentFilter"/>

        <!-- Regexp -->
        <module name="RegexpSinglelineJavaCheck">
            <property name="format" value="^\t* +\t*\S"/>
            <property name="message"
                      value="Line has leading space characters; indentation should be performed with tabs only."/>
            <property name="ignoreComments" value="true"/>
        </module>
        <module name="RegexpSinglelineJavaCheck">
            <property name="maximum" value="0"/>
            <property name="format"
                      value="org\.mockito\.Mockito\.(when|doThrow|doAnswer)"/>
            <property name="message"
                      value="Please use BDDMockito imports."/>
            <property name="ignoreComments" value="true"/>
        </module>
        <module name="RegexpSinglelineJavaCheck">
            <property name="maximum" value="0" />
            <property name="format" value="org\.junit\.Assert\.assert" />
            <property name="message" value="Please use AssertJ imports." />
            <property name="ignoreComments" value="true" />
        </module>
        <module name="RegexpCheck">
            <property name="format" value="[ \t]+$" />
            <property name="illegalPattern" value="true" />
            <property name="message" value="Trailing whitespace" />
        </module>

        <!-- Whitespace -->
        <module name="GenericWhitespaceCheck" />
        <module name="MethodParamPadCheck" />
        <module name="NoWhitespaceAfterCheck">
            <property name="tokens"
                      value="BNOT, DEC, DOT, INC, LNOT, UNARY_MINUS, UNARY_PLUS, ARRAY_DECLARATOR" />
        </module>
        <module name="NoWhitespaceBeforeCheck" />
        <module name="ParenPadCheck" />
        <module name="TypecastParenPadCheck" />
        <module name="WhitespaceAfterCheck" />
        <module name="WhitespaceAroundCheck" />
    </module>
</module>
